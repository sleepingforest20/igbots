"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MarkdownPlugin_1;
const path = require("path");
const typedoc_1 = require("typedoc");
const converter_1 = require("typedoc/dist/lib/converter");
const components_1 = require("typedoc/dist/lib/converter/components");
const events_1 = require("typedoc/dist/lib/output/events");
const theme_1 = require("./theme/theme");
const theme_bitbucket_1 = require("./theme/theme.bitbucket");
const theme_docusaurus_1 = require("./theme/theme.docusaurus");
const theme_gitbook_1 = require("./theme/theme.gitbook");
const theme_vuepress_1 = require("./theme/theme.vuepress");
let MarkdownPlugin = MarkdownPlugin_1 = class MarkdownPlugin extends components_1.ConverterComponent {
    initialize() {
        this.listenTo(this.owner, {
            [converter_1.Converter.EVENT_RESOLVE_BEGIN]: this.onBegin,
        });
        this.listenTo(this.application.renderer, {
            [events_1.PageEvent.BEGIN]: this.onPageBegin,
            [events_1.PageEvent.END]: this.onPageEnd,
            [events_1.RendererEvent.BEGIN]: this.onRenderBegin,
        });
    }
    onBegin() {
        MarkdownPlugin_1.application = this.application;
        MarkdownPlugin_1.settings = this.application.options.getRawValues();
        MarkdownPlugin_1.setTheme(this.application.renderer, this.application.options);
    }
    onRenderBegin(renderer) {
        if (MarkdownPlugin_1.theme) {
            MarkdownPlugin_1.project = renderer.project;
        }
    }
    onPageBegin(page) {
        if (MarkdownPlugin_1.theme) {
            MarkdownPlugin_1.reflection = page.model instanceof typedoc_1.DeclarationReflection ? page.model : undefined;
            MarkdownPlugin_1.location = page.model.url ? page.model.url : '';
        }
    }
    onPageEnd(page) {
        if (MarkdownPlugin_1.theme) {
            page.contents = page.contents ? MarkdownPlugin_1.formatContents(page.contents) : '';
        }
    }
    static setTheme(renderer, options) {
        const themeName = options.getValue('theme');
        const themePath = path.join(__dirname, './theme/');
        const media = options.getValue('media');
        const platform = options.getValue('platform') || options.getValue('mdEngine');
        const theme = themeName === 'markdown' ? this.getTheme(platform, renderer, themePath, options) : null;
        if (theme) {
            if (media && (theme instanceof theme_docusaurus_1.DocusaurusTheme || theme instanceof theme_gitbook_1.GitbookTheme || theme instanceof theme_vuepress_1.VuePressTheme)) {
                MarkdownPlugin_1.application.logger.warn(`[typedoc-markdown-plugin] media option is currently not supported in ${platform} theme`);
                options.setValue('media', null);
            }
            renderer.theme = renderer.addComponent('theme', theme);
            MarkdownPlugin_1.theme = theme;
        }
    }
    static getTheme(platform, renderer, themePath, options) {
        if (platform) {
            if (platform === 'gitbook') {
                return new theme_gitbook_1.GitbookTheme(renderer, themePath, options);
            }
            if (platform === 'docusaurus') {
                return new theme_docusaurus_1.DocusaurusTheme(renderer, themePath, options);
            }
            if (platform === 'bitbucket') {
                return new theme_bitbucket_1.BitbucketTheme(renderer, themePath, options);
            }
            if (platform === 'vuepress') {
                return new theme_vuepress_1.VuePressTheme(renderer, themePath, options);
            }
        }
        return new theme_1.MarkdownTheme(renderer, themePath, options);
    }
    static formatContents(contents) {
        return contents
            .replace(/[\r\n]{3,}/g, '\n\n')
            .replace(/!spaces/g, '')
            .trim();
    }
};
MarkdownPlugin = MarkdownPlugin_1 = __decorate([
    components_1.Component({ name: 'markdown' })
], MarkdownPlugin);
exports.MarkdownPlugin = MarkdownPlugin;
