#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var minimist = require("minimist");
var stdin = require("get-stdin");
var _1 = require("./");
var immutable_1 = require("immutable");
var path_1 = require("path");
var fs_1 = require("fs");
var argv = minimist(process.argv.slice(2));
// unique input
var inputs = immutable_1.OrderedSet(argv._);
// defaults
var defaults = {
    stdin: false,
    namespace: false,
    flow: false
};
// merged options with defaults
var options = __assign({}, defaults, argv);
if (options.stdin) {
    stdin().then(function (str) {
        if (str === '') {
            console.error('no input provided');
        }
        else {
            try {
                JSON.parse(str);
                console.log(_1.json2ts(str, options));
            }
            catch (e) {
                console.error('Invalid JSON');
                console.error(e.message);
            }
        }
    })
        .catch(function (err) {
        console.error(err);
    });
}
else {
    if (inputs.size === 0) {
        console.error('Oops! You provided no inputs');
        console.log("\nYou can pipe JSON to this program with the --stdin flag:\n\n    curl http://example.com/some-json | json-ts --stdin\n    \nOr, provide path names:\n\n    json-ts path/to/my-file.json\n        ");
    }
    else {
        var queue = inputs
            .map(function (input) {
            return {
                input: input,
                parsed: path_1.parse(input),
            };
        })
            .map(function (incoming) {
            return {
                incoming: incoming,
                resolved: resolveInput(incoming, process.cwd())
            };
        });
        var withErrors = queue.filter(function (x) { return x.resolved.errors.length > 0; });
        var withoutErrors = queue.filter(function (x) { return x.resolved.errors.length === 0; });
        if (withErrors.size) {
            console.log('Sorry, there were errors with your input.');
            withErrors.forEach(function (item) {
                console.log('');
                console.log("  " + item.incoming.input + ":");
                console.log('    ', item.resolved.errors[0].error.message);
            });
        }
        else {
            var strings = withoutErrors.map(function (item) {
                return item.resolved.content;
            });
            console.log(_1.json2tsMulti(strings, options));
        }
    }
}
function resolveInput(incoming, cwd) {
    var absolute = path_1.join(cwd, incoming.parsed.dir, incoming.parsed.base);
    if (!fs_1.existsSync(absolute)) {
        return {
            errors: [{
                    kind: 'FileNotFound',
                    error: new Error("File not found")
                }]
        };
    }
    var data = fs_1.readFileSync(absolute, 'utf8');
    try {
        JSON.parse(data);
        return {
            errors: [],
            content: data
        };
    }
    catch (e) {
        return {
            errors: [{
                    kind: 'InvalidJson',
                    error: e
                }]
        };
    }
}
// console.log('options:', options);
// console.log('inputs:', inputs);
// console.log('args', argv);
//# sourceMappingURL=data:application/json;base64,