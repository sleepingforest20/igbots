"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var transformer_1 = require("./transformer");
var util_1 = require("./util");
function collapseInterfaces(interfaces) {
    /**
     * {
     *  'IItems': {count: 5, names: Set {'pets', 'age'} }
     * }
     * @type {any}
     */
    var memberStack = interfaces.reduce(function (acc, int) {
        var lookup = acc[int.name.text];
        if (lookup) {
            lookup.count += 1;
            int.members.forEach(function (mem) {
                lookup.names.add(mem.name.text);
            });
        }
        else {
            acc[int.name.text] = { count: 1, names: new Set([]) };
        }
        return acc;
    }, {});
    /**
     * Look at each interface and mark any members absent in others
     * as optional.
     */
    interfaces.forEach(function (i) {
        var curName = i.name.text;
        var fromStack = memberStack[curName];
        if (fromStack.count === 1) {
            return;
        }
        i.members.forEach(function (localMember) {
            var localName = localMember.name.text;
            if (!fromStack.names.has(localName)) {
                localMember.questionToken = ts.createNode(ts.SyntaxKind.QuestionToken);
            }
        });
    });
    return interfaces.reduce(function (accInterfaces, current) {
        var currentName = current.name.text;
        var currentMemberNames = new Set(current.members.map(function (x) { return (x.name || x.label).text; }));
        var matchingInterfaceIndex = accInterfaces.findIndex(function (x) { return (x.name || x.label).text === currentName; });
        if (matchingInterfaceIndex === -1) {
            return accInterfaces.concat(current);
        }
        accInterfaces.forEach(function (int, index) {
            if (index !== matchingInterfaceIndex) {
                return int;
            }
            var prevMemberNames = new Set(int.members.map(function (x) { return (x.name || x.label).text; }));
            // if the current interface has less props than a previous one
            // we need to back-track and make the previous one optional
            if (currentMemberNames.size < prevMemberNames.size) {
                // elements that existed before, but not in the current
                int.members.forEach(function (mem) {
                    if (!currentMemberNames.has(mem.name.text)) {
                        mem.questionToken = ts.createNode(ts.SyntaxKind.QuestionToken);
                    }
                });
            }
            // Modify members based on missing props, union types etc
            modifyMembers(int.members, current.members);
        });
        return accInterfaces;
    }, []);
}
exports.collapseInterfaces = collapseInterfaces;
function modifyMembers(interfaceMembers, currentMembers) {
    currentMembers.forEach(function (mem) {
        var existingIndex = interfaceMembers.findIndex(function (x) { return x.name.text === mem.name.text; });
        var existingMember = interfaceMembers[existingIndex];
        // Here, the current member does NOT already exist in this
        // interface, so we add it, but as optional
        if (!existingMember) {
            mem.questionToken = ts.createNode(ts.SyntaxKind.QuestionToken);
            interfaceMembers.push(mem);
        }
        else {
            // here it exists in both, are the types the same?
            // console.log(ts.SyntaxKind[mem.type.kind]);
            // console.log(existingMember.kind, mem.kind);
            if (util_1.membersMatch(existingMember, mem)) {
                return;
            }
            else {
                var updatedMember = transformer_1.namedProp({ name: existingMember.name.text });
                // const exists  = existingMember.type.types.some(x => x.kind === mem.kind);
                // already a union, so just push a new type
                if (existingMember.type.kind === ts.SyntaxKind.UnionType) {
                    var asSet = new Set(existingMember.type.types.map(function (x) { return x.kind; }));
                    if (!asSet.has(mem.type.kind)) {
                        existingMember.type.types.push(mem.type);
                        interfaceMembers[existingIndex] = existingMember;
                    }
                }
                else {
                    // was this previously marked as an empty array? eg: any[]
                    // if so & the next item is NOT, then we can ignore the any[]
                    if (util_1.isEmptyArrayType(existingMember) && !util_1.isEmptyArrayType(mem)) {
                        updatedMember.type = ts.createNode(ts.SyntaxKind.ArrayType);
                        updatedMember.type.elementType = mem.type.elementType;
                        interfaceMembers[existingIndex] = updatedMember;
                    }
                    else {
                        // If the INCOMING member type is an empty array, but we already have an array element with items, we bail
                        if (util_1.isEmptyArrayType(mem) && existingMember.type.kind === ts.SyntaxKind.ArrayType && (!util_1.isEmptyArrayType(existingMember))) {
                            return;
                        }
                        var memberNodes = [existingMember.type, mem.type];
                        updatedMember.type = ts.createUnionOrIntersectionTypeNode(ts.SyntaxKind.UnionType, memberNodes);
                        interfaceMembers[existingIndex] = updatedMember;
                    }
                }
            }
        }
    });
}
//# sourceMappingURL=data:application/json;base64,