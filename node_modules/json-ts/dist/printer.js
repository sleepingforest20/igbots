"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var transformer_1 = require("./transformer");
function print(interfaceNodes, inputKind, options) {
    var result = ts.createSourceFile('module', '');
    var printer = ts.createPrinter({
        newLine: ts.NewLineKind.LineFeed,
    });
    if (inputKind === ts.SyntaxKind.ArrayLiteralExpression) {
        var first = interfaceNodes[0];
        var newNode = ts.createNode(ts.SyntaxKind.TypeAliasDeclaration);
        newNode.type = first.members[0].type;
        newNode.name = ts.createIdentifier("" + options.prefix + options.rootName);
        interfaceNodes[0] = newNode;
    }
    if (options.flow) {
        var modified = interfaceNodes.map(function (x) {
            var newNode = ts.createNode(ts.SyntaxKind.TypeAliasDeclaration);
            newNode.modifiers = [ts.createToken(ts.SyntaxKind.ExportKeyword)];
            newNode.type = ts.createTypeLiteralNode(x.members);
            newNode.name = x.name;
            return newNode;
        });
        var items = modified.map(function (x) {
            return printer.printNode(ts.EmitHint.Unspecified, x, result);
        }).join('\n') + '\n';
        return ['// @flow', items].join('\n');
    }
    if (options.namespace) {
        interfaceNodes.forEach(function (x) {
            x.modifiers = [ts.createToken(ts.SyntaxKind.ExportKeyword)];
        });
        var ns = ts.createModuleDeclaration(undefined, [ts.createToken(ts.SyntaxKind.DeclareKeyword)], ts.createIdentifier(options.namespace), ts.createModuleBlock(interfaceNodes), ts.NodeFlags.Namespace);
        return printer.printNode(ts.EmitHint.Unspecified, ns, result) + '\n';
    }
    return interfaceNodes.map(function (x) {
        return printer.printNode(ts.EmitHint.Unspecified, x, result);
    })
        .join('\n') + '\n';
}
exports.print = print;
function printLiteral(node, kind, options) {
    var result = ts.createSourceFile('module', '');
    var printer = ts.createPrinter({
        newLine: ts.NewLineKind.LineFeed,
    });
    var newNode = ts.createNode(ts.SyntaxKind.TypeAliasDeclaration);
    newNode.type = ts.createNode(transformer_1.kindMap[kind]);
    newNode.name = ts.createIdentifier("" + options.prefix + options.rootName);
    return printer.printNode(ts.EmitHint.Unspecified, newNode, result);
}
exports.printLiteral = printLiteral;
function wrapper(blocks, options) {
    if (options.namespace) {
        var lines = [
            "declare namespace " + options.namespace + " {"
        ].concat(blocks.split('\n').map(function (x) { return "  " + x; }), [
            "}",
        ]);
        return lines.join('\n');
    }
    return blocks;
}
//# sourceMappingURL=data:application/json;base64,